// Code generated by protoc-gen-go.
// source: proto/volume.proto
// DO NOT EDIT!

package tofu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type File struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type FileInfo struct {
	File   *File   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Blocks *Blocks `protobuf:"bytes,2,opt,name=blocks" json:"blocks,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetBlocks() *Blocks {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "tofu.File")
	proto.RegisterType((*FileInfo)(nil), "tofu.FileInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for VolumeStore service

type VolumeStoreClient interface {
	GetFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileInfo, error)
	PutFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	ListFiles(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (VolumeStore_ListFilesClient, error)
}

type volumeStoreClient struct {
	cc *grpc.ClientConn
}

func NewVolumeStoreClient(cc *grpc.ClientConn) VolumeStoreClient {
	return &volumeStoreClient{cc}
}

func (c *volumeStoreClient) GetFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/tofu.VolumeStore/GetFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeStoreClient) PutFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/tofu.VolumeStore/PutFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeStoreClient) ListFiles(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (VolumeStore_ListFilesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeStore_serviceDesc.Streams[0], c.cc, "/tofu.VolumeStore/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeStoreListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeStore_ListFilesClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type volumeStoreListFilesClient struct {
	grpc.ClientStream
}

func (x *volumeStoreListFilesClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VolumeStore service

type VolumeStoreServer interface {
	GetFile(context.Context, *File) (*FileInfo, error)
	PutFile(context.Context, *FileInfo) (*FileInfo, error)
	ListFiles(*EmptyValue, VolumeStore_ListFilesServer) error
}

func RegisterVolumeStoreServer(s *grpc.Server, srv VolumeStoreServer) {
	s.RegisterService(&_VolumeStore_serviceDesc, srv)
}

func _VolumeStore_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeStoreServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tofu.VolumeStore/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeStoreServer).GetFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeStore_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeStoreServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tofu.VolumeStore/PutFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeStoreServer).PutFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeStore_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeStoreServer).ListFiles(m, &volumeStoreListFilesServer{stream})
}

type VolumeStore_ListFilesServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type volumeStoreListFilesServer struct {
	grpc.ServerStream
}

func (x *volumeStoreListFilesServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _VolumeStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tofu.VolumeStore",
	HandlerType: (*VolumeStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _VolumeStore_GetFile_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _VolumeStore_PutFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFiles",
			Handler:       _VolumeStore_ListFiles_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor2 = []byte{
	// 247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xad, 0x94, 0xcd, 0xdd, 0x89, 0xe8, 0x7d, 0x1a, 0x79, 0x10, 0x29, 0x82, 0x82, 0x98,
	0xea, 0xfc, 0x07, 0x82, 0x8a, 0xe0, 0xc3, 0xa8, 0xb0, 0xf7, 0x65, 0x24, 0x5d, 0x31, 0xd9, 0x2d,
	0x6b, 0x22, 0xf8, 0x47, 0xfc, 0xbd, 0x2e, 0x37, 0x05, 0x45, 0xfa, 0x76, 0xee, 0xf9, 0xce, 0x3d,
	0xbd, 0x0d, 0x60, 0xbb, 0x23, 0x4f, 0xe5, 0x27, 0xd9, 0xe0, 0xb4, 0xe4, 0x01, 0x73, 0x4f, 0x26,
	0x88, 0xdb, 0xba, 0xf1, 0x9b, 0xa0, 0xe4, 0x9a, 0x5c, 0x59, 0x53, 0x4d, 0x25, 0x43, 0x15, 0x0c,
	0x4f, 0x69, 0x2d, 0xaa, 0xb4, 0x24, 0xfa, 0xa2, 0x7d, 0xda, 0xd1, 0xb6, 0xf7, 0xce, 0x92, 0xa7,
	0x2c, 0xad, 0x3f, 0x92, 0x55, 0x08, 0xc8, 0x9f, 0x1b, 0xab, 0x11, 0x21, 0x6f, 0x57, 0x7e, 0x33,
	0xcb, 0x2e, 0xb2, 0xeb, 0x49, 0xc5, 0xba, 0x58, 0xc0, 0x51, 0x64, 0xaf, 0x5b, 0x43, 0x78, 0x0e,
	0xb9, 0xd9, 0x6b, 0xe6, 0xd3, 0x39, 0xc8, 0x78, 0x92, 0x8c, 0xb4, 0x62, 0x1f, 0x2f, 0x61, 0xc4,
	0xb5, 0xdd, 0xec, 0x90, 0x13, 0xc7, 0x29, 0xf1, 0xc8, 0x5e, 0xd5, 0xb3, 0xf9, 0x77, 0x06, 0xd3,
	0x25, 0xff, 0xda, 0xbb, 0xa7, 0x9d, 0xc6, 0x2b, 0x18, 0xbf, 0x68, 0xcf, 0x07, 0xfc, 0xa9, 0x14,
	0x27, 0xbf, 0x3a, 0x7e, 0xbc, 0x38, 0xc0, 0x1b, 0x18, 0x2f, 0x42, 0x0a, 0xfe, 0x83, 0x03, 0xe1,
	0x7b, 0x98, 0xbc, 0x35, 0x1d, 0xa7, 0x3b, 0x3c, 0x4d, 0xf8, 0xc9, 0xb5, 0xfe, 0x6b, 0xb9, 0xb2,
	0x61, 0xa0, 0xfd, 0x2e, 0x53, 0x23, 0x7e, 0x8d, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2,
	0xea, 0xd1, 0x9a, 0x7f, 0x01, 0x00, 0x00,
}
