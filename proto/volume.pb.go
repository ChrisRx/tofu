// Code generated by protoc-gen-gogo.
// source: proto/volume.proto
// DO NOT EDIT!

package tofu

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type File struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptorVolume, []int{0} }

type FileInfo struct {
	File   *File   `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
	Blocks *Blocks `protobuf:"bytes,2,opt,name=blocks" json:"blocks,omitempty"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptorVolume, []int{1} }

func (m *FileInfo) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FileInfo) GetBlocks() *Blocks {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "tofu.File")
	proto.RegisterType((*FileInfo)(nil), "tofu.FileInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for VolumeStore service

type VolumeStoreClient interface {
	GetFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileInfo, error)
	PutFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error)
	ListFiles(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (VolumeStore_ListFilesClient, error)
}

type volumeStoreClient struct {
	cc *grpc.ClientConn
}

func NewVolumeStoreClient(cc *grpc.ClientConn) VolumeStoreClient {
	return &volumeStoreClient{cc}
}

func (c *volumeStoreClient) GetFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/tofu.VolumeStore/GetFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeStoreClient) PutFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := grpc.Invoke(ctx, "/tofu.VolumeStore/PutFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeStoreClient) ListFiles(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (VolumeStore_ListFilesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VolumeStore_serviceDesc.Streams[0], c.cc, "/tofu.VolumeStore/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &volumeStoreListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VolumeStore_ListFilesClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type volumeStoreListFilesClient struct {
	grpc.ClientStream
}

func (x *volumeStoreListFilesClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for VolumeStore service

type VolumeStoreServer interface {
	GetFile(context.Context, *File) (*FileInfo, error)
	PutFile(context.Context, *FileInfo) (*FileInfo, error)
	ListFiles(*EmptyValue, VolumeStore_ListFilesServer) error
}

func RegisterVolumeStoreServer(s *grpc.Server, srv VolumeStoreServer) {
	s.RegisterService(&_VolumeStore_serviceDesc, srv)
}

func _VolumeStore_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeStoreServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tofu.VolumeStore/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeStoreServer).GetFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeStore_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeStoreServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tofu.VolumeStore/PutFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeStoreServer).PutFile(ctx, req.(*FileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeStore_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VolumeStoreServer).ListFiles(m, &volumeStoreListFilesServer{stream})
}

type VolumeStore_ListFilesServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type volumeStoreListFilesServer struct {
	grpc.ServerStream
}

func (x *volumeStoreListFilesServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _VolumeStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tofu.VolumeStore",
	HandlerType: (*VolumeStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _VolumeStore_GetFile_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _VolumeStore_PutFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFiles",
			Handler:       _VolumeStore_ListFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorVolume,
}

func (m *File) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *File) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintVolume(data, i, uint64(len(m.Path)))
		i += copy(data[i:], m.Path)
	}
	return i, nil
}

func (m *FileInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FileInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.File != nil {
		data[i] = 0xa
		i++
		i = encodeVarintVolume(data, i, uint64(m.File.Size()))
		n1, err := m.File.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Blocks != nil {
		data[i] = 0x12
		i++
		i = encodeVarintVolume(data, i, uint64(m.Blocks.Size()))
		n2, err := m.Blocks.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Volume(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Volume(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVolume(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *File) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovVolume(uint64(l))
	}
	return n
}

func (m *FileInfo) Size() (n int) {
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovVolume(uint64(l))
	}
	if m.Blocks != nil {
		l = m.Blocks.Size()
		n += 1 + l + sovVolume(uint64(l))
	}
	return n
}

func sovVolume(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVolume(x uint64) (n int) {
	return sovVolume(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *File) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVolume
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolume(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVolume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVolume
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &File{}
			}
			if err := m.File.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVolume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVolume
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blocks == nil {
				m.Blocks = &Blocks{}
			}
			if err := m.Blocks.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVolume(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVolume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVolume(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVolume
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVolume
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVolume
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVolume
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVolume
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVolume(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVolume = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVolume   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/volume.proto", fileDescriptorVolume) }

var fileDescriptorVolume = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xcb, 0xcf, 0x29, 0xcd, 0x4d, 0xd5, 0x03, 0x73, 0x84, 0x58, 0x4a, 0xf2, 0xd3,
	0x4a, 0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3,
	0xd3, 0xf3, 0xf5, 0xc1, 0x92, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x44, 0x1b, 0x88, 0x05, 0xd1, 0x24,
	0x05, 0x35, 0x08, 0xa8, 0x3a, 0x37, 0x3f, 0x0f, 0x2a, 0x26, 0x08, 0x11, 0x4b, 0xca, 0xc9, 0x4f,
	0xce, 0x86, 0x08, 0x29, 0x49, 0x71, 0xb1, 0xb8, 0x65, 0xe6, 0xa4, 0x0a, 0x09, 0x71, 0xb1, 0x14,
	0x24, 0x96, 0x64, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x4a, 0x01, 0x5c, 0x1c,
	0x20, 0x39, 0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x39, 0x2e, 0x96, 0x34, 0x20, 0x1b, 0x2c, 0xcf, 0x6d,
	0xc4, 0xa5, 0x07, 0x72, 0x92, 0x1e, 0x48, 0x36, 0x08, 0x2c, 0x2e, 0xa4, 0xc2, 0xc5, 0x06, 0x36,
	0xb6, 0x58, 0x82, 0x09, 0xac, 0x82, 0x07, 0xa2, 0xc2, 0x09, 0x2c, 0x16, 0x04, 0x95, 0x33, 0x9a,
	0xc6, 0xc8, 0xc5, 0x1d, 0x06, 0xf6, 0x5a, 0x70, 0x49, 0x7e, 0x51, 0xaa, 0x90, 0x3a, 0x17, 0xbb,
	0x7b, 0x6a, 0x09, 0xd8, 0x01, 0x48, 0x46, 0x4a, 0xf1, 0x21, 0xd8, 0x20, 0xcb, 0x95, 0x18, 0x84,
	0xb4, 0xb9, 0xd8, 0x03, 0x4a, 0x21, 0x0a, 0xd1, 0x24, 0xb1, 0x28, 0x36, 0xe4, 0xe2, 0xf4, 0xc9,
	0x2c, 0x06, 0xab, 0x2e, 0x16, 0x12, 0x80, 0x48, 0xbb, 0xe6, 0x16, 0x94, 0x54, 0x86, 0x25, 0xe6,
	0x94, 0x62, 0x31, 0xdd, 0x80, 0xd1, 0x89, 0xe7, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x40, 0xfc, 0x00,
	0x88, 0x93, 0xd8, 0xc0, 0x61, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x66, 0xcc, 0x4b,
	0x8d, 0x01, 0x00, 0x00,
}
