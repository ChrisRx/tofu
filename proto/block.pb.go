// Code generated by protoc-gen-gogo.
// source: proto/block.proto
// DO NOT EDIT!

/*
Package tofu is a generated protocol buffer package.

It is generated from these files:
	proto/block.proto
	proto/common.proto
	proto/volume.proto

It has these top-level messages:
	Block
	Blocks
	BytesValue
	EmptyValue
	File
	FileInfo
*/
package tofu

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{0} }

type Blocks struct {
	Block []*Block `protobuf:"bytes,1,rep,name=block" json:"block,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{1} }

func (m *Blocks) GetBlock() []*Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "tofu.Block")
	proto.RegisterType((*Blocks)(nil), "tofu.Blocks")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for BlockStore service

type BlockStoreClient interface {
	GetBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (BlockStore_GetBlockClient, error)
	PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockStore_PutBlockClient, error)
	ListBlocks(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (BlockStore_ListBlocksClient, error)
}

type blockStoreClient struct {
	cc *grpc.ClientConn
}

func NewBlockStoreClient(cc *grpc.ClientConn) BlockStoreClient {
	return &blockStoreClient{cc}
}

func (c *blockStoreClient) GetBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (BlockStore_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockStore_serviceDesc.Streams[0], c.cc, "/tofu.BlockStore/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStoreGetBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStore_GetBlockClient interface {
	Recv() (*BytesValue, error)
	grpc.ClientStream
}

type blockStoreGetBlockClient struct {
	grpc.ClientStream
}

func (x *blockStoreGetBlockClient) Recv() (*BytesValue, error) {
	m := new(BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockStoreClient) PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockStore_PutBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockStore_serviceDesc.Streams[1], c.cc, "/tofu.BlockStore/PutBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStorePutBlockClient{stream}
	return x, nil
}

type BlockStore_PutBlockClient interface {
	Send(*BytesValue) error
	CloseAndRecv() (*Block, error)
	grpc.ClientStream
}

type blockStorePutBlockClient struct {
	grpc.ClientStream
}

func (x *blockStorePutBlockClient) Send(m *BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockStorePutBlockClient) CloseAndRecv() (*Block, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockStoreClient) ListBlocks(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (BlockStore_ListBlocksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockStore_serviceDesc.Streams[2], c.cc, "/tofu.BlockStore/ListBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStoreListBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStore_ListBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type blockStoreListBlocksClient struct {
	grpc.ClientStream
}

func (x *blockStoreListBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BlockStore service

type BlockStoreServer interface {
	GetBlock(*Block, BlockStore_GetBlockServer) error
	PutBlock(BlockStore_PutBlockServer) error
	ListBlocks(*EmptyValue, BlockStore_ListBlocksServer) error
}

func RegisterBlockStoreServer(s *grpc.Server, srv BlockStoreServer) {
	s.RegisterService(&_BlockStore_serviceDesc, srv)
}

func _BlockStore_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Block)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStoreServer).GetBlock(m, &blockStoreGetBlockServer{stream})
}

type BlockStore_GetBlockServer interface {
	Send(*BytesValue) error
	grpc.ServerStream
}

type blockStoreGetBlockServer struct {
	grpc.ServerStream
}

func (x *blockStoreGetBlockServer) Send(m *BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockStore_PutBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockStoreServer).PutBlock(&blockStorePutBlockServer{stream})
}

type BlockStore_PutBlockServer interface {
	SendAndClose(*Block) error
	Recv() (*BytesValue, error)
	grpc.ServerStream
}

type blockStorePutBlockServer struct {
	grpc.ServerStream
}

func (x *blockStorePutBlockServer) SendAndClose(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockStorePutBlockServer) Recv() (*BytesValue, error) {
	m := new(BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlockStore_ListBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStoreServer).ListBlocks(m, &blockStoreListBlocksServer{stream})
}

type BlockStore_ListBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type blockStoreListBlocksServer struct {
	grpc.ServerStream
}

func (x *blockStoreListBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

var _BlockStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tofu.BlockStore",
	HandlerType: (*BlockStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlock",
			Handler:       _BlockStore_GetBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutBlock",
			Handler:       _BlockStore_PutBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListBlocks",
			Handler:       _BlockStore_ListBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorBlock,
}

func (m *Block) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Block) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintBlock(data, i, uint64(len(m.Hash)))
		i += copy(data[i:], m.Hash)
	}
	return i, nil
}

func (m *Blocks) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Blocks) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Block) > 0 {
		for _, msg := range m.Block {
			data[i] = 0xa
			i++
			i = encodeVarintBlock(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Block(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Block(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBlock(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Block) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *Blocks) Size() (n int) {
	var l int
	_ = l
	if len(m.Block) > 0 {
		for _, e := range m.Block {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func sovBlock(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Block) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blocks) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blocks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blocks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block, &Block{})
			if err := m.Block[len(m.Block)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlock(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto/block.proto", fileDescriptorBlock) }

var fileDescriptorBlock = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x03, 0xb3, 0x85, 0x58, 0x4a, 0xf2, 0xd3, 0x4a,
	0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3,
	0xf3, 0xf5, 0xc1, 0x92, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x44, 0x17, 0x88, 0x05, 0xd1, 0x24, 0x25,
	0x04, 0x11, 0x01, 0xaa, 0xce, 0xcd, 0xcf, 0x83, 0x88, 0x29, 0x49, 0x73, 0xb1, 0x3a, 0x81, 0xcc,
	0x15, 0x12, 0xe2, 0x62, 0xc9, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0xb4, 0xb9, 0xd8, 0xc0, 0x92, 0xc5, 0x42, 0x8a, 0x5c, 0xac, 0x60, 0xeb, 0x81, 0xd2,
	0xcc, 0x1a, 0xdc, 0x46, 0xdc, 0x7a, 0x20, 0xfb, 0xf5, 0xc0, 0x92, 0x41, 0x10, 0x19, 0xa3, 0xd9,
	0x8c, 0x5c, 0x5c, 0x60, 0x81, 0xe0, 0x92, 0xfc, 0xa2, 0x54, 0x21, 0x5d, 0x2e, 0x0e, 0xf7, 0xd4,
	0x12, 0x88, 0xd9, 0xc8, 0xca, 0xa5, 0x04, 0xa0, 0x9c, 0xca, 0x92, 0xd4, 0xe2, 0xb0, 0xc4, 0x9c,
	0xd2, 0x54, 0x25, 0x06, 0x03, 0x46, 0x90, 0xf2, 0x80, 0x52, 0xa8, 0x72, 0x0c, 0x15, 0x52, 0xc8,
	0x06, 0x28, 0x31, 0x68, 0x30, 0x0a, 0xe9, 0x73, 0x71, 0xf9, 0x64, 0x16, 0x97, 0x40, 0x5d, 0x07,
	0xd5, 0xe0, 0x9a, 0x5b, 0x50, 0x52, 0x89, 0x4d, 0x83, 0x01, 0xa3, 0x13, 0xcf, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x80, 0xf8, 0x01, 0x10, 0x27, 0xb1, 0x81, 0x3d, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xbd, 0xbc, 0x0f, 0x99, 0x5a, 0x01, 0x00, 0x00,
}
