// Code generated by protoc-gen-go.
// source: proto/block.proto
// DO NOT EDIT!

/*
Package tofu is a generated protocol buffer package.

It is generated from these files:
	proto/block.proto
	proto/common.proto
	proto/volume.proto

It has these top-level messages:
	Block
	Blocks
	BytesValue
	EmptyValue
	File
	FileInfo
*/
package tofu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Block struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Blocks struct {
	Block []*Block `protobuf:"bytes,1,rep,name=block" json:"block,omitempty"`
}

func (m *Blocks) Reset()                    { *m = Blocks{} }
func (m *Blocks) String() string            { return proto.CompactTextString(m) }
func (*Blocks) ProtoMessage()               {}
func (*Blocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Blocks) GetBlock() []*Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*Block)(nil), "tofu.Block")
	proto.RegisterType((*Blocks)(nil), "tofu.Blocks")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for BlockStore service

type BlockStoreClient interface {
	GetBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (BlockStore_GetBlockClient, error)
	PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockStore_PutBlockClient, error)
	ListBlocks(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (BlockStore_ListBlocksClient, error)
}

type blockStoreClient struct {
	cc *grpc.ClientConn
}

func NewBlockStoreClient(cc *grpc.ClientConn) BlockStoreClient {
	return &blockStoreClient{cc}
}

func (c *blockStoreClient) GetBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (BlockStore_GetBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockStore_serviceDesc.Streams[0], c.cc, "/tofu.BlockStore/GetBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStoreGetBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStore_GetBlockClient interface {
	Recv() (*BytesValue, error)
	grpc.ClientStream
}

type blockStoreGetBlockClient struct {
	grpc.ClientStream
}

func (x *blockStoreGetBlockClient) Recv() (*BytesValue, error) {
	m := new(BytesValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockStoreClient) PutBlock(ctx context.Context, opts ...grpc.CallOption) (BlockStore_PutBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockStore_serviceDesc.Streams[1], c.cc, "/tofu.BlockStore/PutBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStorePutBlockClient{stream}
	return x, nil
}

type BlockStore_PutBlockClient interface {
	Send(*BytesValue) error
	CloseAndRecv() (*Block, error)
	grpc.ClientStream
}

type blockStorePutBlockClient struct {
	grpc.ClientStream
}

func (x *blockStorePutBlockClient) Send(m *BytesValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockStorePutBlockClient) CloseAndRecv() (*Block, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockStoreClient) ListBlocks(ctx context.Context, in *EmptyValue, opts ...grpc.CallOption) (BlockStore_ListBlocksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BlockStore_serviceDesc.Streams[2], c.cc, "/tofu.BlockStore/ListBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStoreListBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStore_ListBlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type blockStoreListBlocksClient struct {
	grpc.ClientStream
}

func (x *blockStoreListBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BlockStore service

type BlockStoreServer interface {
	GetBlock(*Block, BlockStore_GetBlockServer) error
	PutBlock(BlockStore_PutBlockServer) error
	ListBlocks(*EmptyValue, BlockStore_ListBlocksServer) error
}

func RegisterBlockStoreServer(s *grpc.Server, srv BlockStoreServer) {
	s.RegisterService(&_BlockStore_serviceDesc, srv)
}

func _BlockStore_GetBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Block)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStoreServer).GetBlock(m, &blockStoreGetBlockServer{stream})
}

type BlockStore_GetBlockServer interface {
	Send(*BytesValue) error
	grpc.ServerStream
}

type blockStoreGetBlockServer struct {
	grpc.ServerStream
}

func (x *blockStoreGetBlockServer) Send(m *BytesValue) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockStore_PutBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockStoreServer).PutBlock(&blockStorePutBlockServer{stream})
}

type BlockStore_PutBlockServer interface {
	SendAndClose(*Block) error
	Recv() (*BytesValue, error)
	grpc.ServerStream
}

type blockStorePutBlockServer struct {
	grpc.ServerStream
}

func (x *blockStorePutBlockServer) SendAndClose(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockStorePutBlockServer) Recv() (*BytesValue, error) {
	m := new(BytesValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlockStore_ListBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStoreServer).ListBlocks(m, &blockStoreListBlocksServer{stream})
}

type BlockStore_ListBlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type blockStoreListBlocksServer struct {
	grpc.ServerStream
}

func (x *blockStoreListBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

var _BlockStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tofu.BlockStore",
	HandlerType: (*BlockStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlock",
			Handler:       _BlockStore_GetBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutBlock",
			Handler:       _BlockStore_PutBlock_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListBlocks",
			Handler:       _BlockStore_ListBlocks_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0xd6, 0x03, 0xb3, 0x85, 0x58, 0x4a, 0xf2, 0xd3, 0x4a,
	0xa5, 0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3,
	0xf3, 0xf5, 0xc1, 0x92, 0x49, 0xa5, 0x69, 0x60, 0x1e, 0x44, 0x17, 0x88, 0x05, 0xd1, 0x24, 0x25,
	0x04, 0x11, 0x01, 0xaa, 0xce, 0xcd, 0xcf, 0x83, 0x88, 0x29, 0x49, 0x73, 0xb1, 0x3a, 0x81, 0xcc,
	0x15, 0x12, 0xe2, 0x62, 0xc9, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0xb4, 0xb9, 0xd8, 0xc0, 0x92, 0xc5, 0x42, 0x8a, 0x5c, 0xac, 0x60, 0xeb, 0x81, 0xd2,
	0xcc, 0x1a, 0xdc, 0x46, 0xdc, 0x7a, 0x20, 0xfb, 0xf5, 0xc0, 0x92, 0x41, 0x10, 0x19, 0xa3, 0xd9,
	0x8c, 0x5c, 0x5c, 0x60, 0x81, 0xe0, 0x92, 0xfc, 0xa2, 0x54, 0x21, 0x5d, 0x2e, 0x0e, 0xf7, 0xd4,
	0x12, 0x88, 0xd9, 0xc8, 0xca, 0xa5, 0x04, 0xa0, 0x9c, 0xca, 0x92, 0xd4, 0xe2, 0xb0, 0xc4, 0x9c,
	0xd2, 0x54, 0x25, 0x06, 0x03, 0x46, 0x90, 0xf2, 0x80, 0x52, 0xa8, 0x72, 0x0c, 0x15, 0x52, 0xc8,
	0x06, 0x28, 0x31, 0x68, 0x30, 0x0a, 0xe9, 0x73, 0x71, 0xf9, 0x64, 0x16, 0x97, 0x40, 0x5d, 0x07,
	0xd5, 0xe0, 0x9a, 0x5b, 0x50, 0x52, 0x89, 0x4d, 0x83, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0xbb, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xa1, 0xa5, 0x23, 0x4c, 0x01, 0x00, 0x00,
}
